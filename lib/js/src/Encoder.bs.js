// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Natural = require("natural");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var TrainingData = require("ygo-text-model/trainingData");

var Natural$1 = {};

function getTokenizedArr(item) {
  var tokens = " ".split(item.input);
  return Belt_Array.map(tokens, (function (token) {
                return Curry._1(Natural.PorterStemmer.stem, token);
              }));
}

function getDictionary(self, item, pos) {
  return self.indexOf(item) === pos;
}

function getEncoder(dictionary, phrase) {
  var phraseTokens = " ".split(phrase);
  return Belt_Array.map(dictionary, (function (word) {
                if (phraseTokens.includes(word)) {
                  return 1;
                } else {
                  return 0;
                }
              }));
}

function encodeTrainingSet(encodeFn, item) {
  var encodedValue = Curry._1(encodeFn, item.input);
  return {
          input: encodedValue,
          output: item.output
        };
}

var tokenizedArray = Belt_Array.map(TrainingData, getTokenizedArr);

var flattenedArray = [].concat.apply(tokenizedArray);

var dictionary = flattenedArray.filter(function (param, param$1) {
      return getDictionary(flattenedArray, param, param$1);
    });

function encode(param) {
  return getEncoder(dictionary, param);
}

exports.Natural = Natural$1;
exports.getTokenizedArr = getTokenizedArr;
exports.getDictionary = getDictionary;
exports.getEncoder = getEncoder;
exports.encodeTrainingSet = encodeTrainingSet;
exports.tokenizedArray = tokenizedArray;
exports.flattenedArray = flattenedArray;
exports.dictionary = dictionary;
exports.encode = encode;
/* tokenizedArray Not a pure module */
